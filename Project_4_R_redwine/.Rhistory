library(ggplot2)
summary(diamonds)
ggplot(diamonds, aes(x = price)) + geom_histogram(bins = 100) + scale_x_continuous(limits = c(250, 5000))
summary(diamonds$price)
ggplot(aes(x = price), data = na.omit(diamonds)) + geom_histogram(bins=30) + facet_wrap(~cut)
table(diamonds$cut)
by(diamonds$price,diamonds$cut,summary)
ggplot(aes(x = price/carat), data = na.omit(diamonds)) + geom_histogram(bins=30) + facet_wrap(~cut)
ggplot(aes(y = price, x=cut), data = na.omit(diamonds)) + geom_boxplot()
ggplot(aes(y = price, x=clarity), data = na.omit(diamonds)) + geom_boxplot()
ggplot(aes(y = price, x=color), data = na.omit(diamonds)) + geom_boxplot()
ggplot(aes(x = carat), data = na.omit(diamonds)) + geom_freqpoly(bins=200)
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
ggplot(aes(x = price), data = na.omit(diamonds)) + geom_histogram(aes(color = cut)) + facet_wrap(~color) + scale_x_log10()
ggplot(aes(y = price, x = table), data = na.omit(diamonds)) + geom_point(aes(color = cut))
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
ggplot(aes(x = price), data = na.omit(diamonds)) + geom_histogram(aes(color = cut)) + facet_wrap(~color) + scale_x_log10()
ggplot(aes(y = price, x = carat), data = na.omit(diamonds)) + geom_point(aes(color = cut))
ggplot(aes(y = price, x = volume), data = na.omit(diamonds)) + geom_point()
ggplot(aes(y = price, x = x*y*z), data = na.omit(diamonds)) + geom_point()
ggplot(aes(y = price, x = x*y*z), data = diamonds[diamonds < quantile(diamonds, 0.99), ]) + geom_point()
ggplot(aes(y = price, x = x*y*z), data = diamonds[diamonds$price < quantile(diamonds$price, 0.99), ]) + geom_point()
diamonds$volume <- diamonds$x * diamonds$y * diamonds$z
ggplot(aes(y = price, x = x*y*z), data = diamonds[diamonds$price < quantile(diamonds$price, 0.99), ]) + geom_point()
cor(diamonds$price,diamonds$volume)
sub_diamonds <- subset(diamonds,volume<800 | volume>0)
View(sub_diamonds)
sub_diamonds <- subset(diamonds,volume<800 | volume!=0)
sub_diamonds <- subset(diamonds,volume<800 & volume!=0)
View(sub_diamonds)
ggplot(aes(x = volume, y = price), data = sub_diamonds) +
geom_point() +  geom_smooth(method = 'lm', color = 'red')
ggplot(aes(x = volume, y = price), data = sub_diamonds) +
geom_point(alpha=1/20) +  geom_smooth(method = 'lm', color = 'red')
ggplot(aes(y = price, x = x*y*z), data = diamonds[diamonds$price < quantile(diamonds$price, 0.99), ]) + geom_point() +scale_y_log10()
ggplot(aes(y = price, x =volume), data = diamonds[diamonds$price < quantile(diamonds$price, 0.99), ]) + geom_point() +scale_y_log10()
ggplot(aes(y = price, x =volume), data = diamonds[diamonds$volume < quantile(diamonds$volume, 0.99), ]) + geom_point() +scale_y_log10()
ggplot(aes(y = price, x =volume), data = diamonds[diamonds$volume < quantile(diamonds$volume, 0.99), ]) + geom_point(color=clarity) +scale_y_log10()
View(diamonds)
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
ggplot(aes(x = price), data = na.omit(diamonds)) + geom_histogram(aes(color = cut)) + facet_wrap(~color) + scale_x_log10()
ggplot(aes(y = price, x = carat), data = na.omit(diamonds)) + geom_point(aes(color = cut))
diamonds$volume <- diamonds$x * diamonds$y * diamonds$z
ggplot(aes(y = price, x =volume), data = diamonds[diamonds$volume < quantile(diamonds$volume, 0.99), ]) + geom_point(aes(color=clarity)) +scale_y_log10()
ggplot(aes(y = price, x =volume), data = diamonds[diamonds$volume < quantile(diamonds$volume, 0.99), ]) + geom_point(aes(color=clarity))+scale_color_brewer(type = 'div') +scale_y_log10()
ggplot(aes(y = price, x =cut), data = diamonds[diamonds$volume < quantile(diamonds$volume, 0.99), ]) + geom_point(aes(color=clarity))+scale_color_brewer(type = 'div') +scale_y_log10()
ggplot(aes(y = price, x =cut), data = diamonds[diamonds$volume < quantile(diamonds$volume, 0.99), ]) + geom_point(aes(color=color))+scale_color_brewer(type = 'div') +scale_y_log10()
ggplot(aes(y = price, x =volume), data = diamonds[diamonds$volume < quantile(diamonds$volume, 0.99), ]) + geom_point(aes(color=color))+scale_color_brewer(type = 'div') +scale_y_log10() + facet_wrap(~color)
ggplot(aes(y = price/carat, x =volume), data = diamonds[diamonds$volume < quantile(diamonds$volume, 0.99), ]) + geom_point(aes(color=color))+scale_color_brewer(type = 'div') +scale_y_log10() + facet_wrap(~color)
ggplot(aes(y = price/carat, x =volume), data = diamonds[diamonds$volume < quantile(diamonds$volume, 0.99), ]) + geom_point(aes(color=color))+scale_color_brewer(type = 'div') +scale_y_log10() + facet_wrap(~cut)
ggplot(aes(y = price/carat, x =volume), data = diamonds[diamonds$volume < quantile(diamonds$volume, 0.99), ]) + geom_point(aes(color=color))+scale_color_brewer(type = 'div') +scale_y_log10() + facet_wrap(~clarity)
ggplot(aes(y = price/carat, x =cut), data = diamonds[diamonds$volume < quantile(diamonds$volume, 0.99), ]) + geom_point(aes(color=color))+scale_color_brewer(type = 'div') +scale_y_log10() + facet_wrap(~clarity)
# install these if necessary
#install.packages('GGally')
#install.packages('scales')
#install.packages('memisc')
#install.packages('lattice')
#install.packages('MASS')
#install.packages('car')
#install.packages('reshape')
#install.packages('plyr')
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
# install these if necessary
#install.packages('GGally')
#install.packages('scales')
#install.packages('memisc')
#install.packages('lattice')
#install.packages('MASS')
#install.packages('car')
#install.packages('reshape')
#install.packages('plyr')
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# install these if necessary
#install.packages('GGally')
#install.packages('scales')
#install.packages('memisc')
#install.packages('lattice')
#install.packages('MASS')
#install.packages('car')
#install.packages('reshape')
#install.packages('plyr')
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# install and load the RColorBrewer package
install.packages('RColorBrewer')
library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
install.packages("RColorBrewer")
# install and load the RColorBrewer package
install.packages('RColorBrewer')
library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
# install and load the RColorBrewer package
install.packages('RColorBrewer')
library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
install.packages("RColorBrewer")
# install and load the RColorBrewer package
#install.packages('RColorBrewer')
library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
# install and load the RColorBrewer package
#install.packages('RColorBrewer')
library(RColorBrewer)
library(ggplot2)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
# install and load the RColorBrewer package
#install.packages('RColorBrewer')
library(RColorBrewer)
library(ggplot2)
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
# install and load the RColorBrewer package
#install.packages('RColorBrewer')
library(RColorBrewer)
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = Cut, reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
install.package('bitops')
install.package('bitops')
install.packages('bitops')
install.packages('RCurl')
library('bitops')
library('RCurl')
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
install.packages('bitops')
install.packages('RCurl')
library('bitops')
library('RCurl')
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
install.packages("bitops")
install.packages('bitops')
install.packages('RCurl')
library('bitops')
library('RCurl')
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
#Be sure youâve loaded the library memisc and have m5 saved as an object in your workspace.
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
#install.packages('bitops')
#install.packages('RCurl')
library('bitops')
library('RCurl')
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
install.packages('bitops')
install.packages('RCurl')
library('bitops')
library('RCurl')
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
install.packages("bitops")
#install.packages('bitops')
#install.packages('RCurl')
library('bitops')
library('RCurl')
#diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
#load(rawConnection(diamondsurl))
load("BigDiamonds.rda")
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = df)
df$logprice <- log(df$price)
#install.packages('bitops')
#install.packages('RCurl')
library('bitops')
library('RCurl')
#diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
#load(rawConnection(diamondsurl))
df<-load("BigDiamonds.rda")
diamondsbig$logprice <- log(diamondsbig$price)
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamondsbig)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
#Be sure youâve loaded the library memisc and have m5 saved as an object in your workspace.
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
getwd()
setwd('D:\google_drive\Online courses\udacity\Nano_degree_data_analytics\Udacity_Data_Analyst_Nanodegree\Project_4_R_redwine')
setwd('D:/google_drive/Online courses/udacity/Nano_degree_data_analytics/Udacity_Data_Analyst_Nanodegree/Project_4_R_redwine')
getwd()
plot(cars)
library(ggplot2)
library(ggthemes)
# Load all of the packages that you end up using in your analysis in this code
# chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk. This
# prevents the code from displaying in the knitted HTML output. You should set
# echo=FALSE for all code chunks in your file, unless it makes sense for your
# report to show the code that generated a particular plot.
# The other parameters for "message" and "warning" should also be set to FALSE
# for other code chunks once you have verified that each plot comes out as you
# want it to. This will clean up the flow of your report.
library(ggplot2)
# Load the Data
library(ggplot2)
library(dplyr)
library(gridExtra)
library(tidyr)
library(scales)
library(GGally)
df <- read.csv('wineQualityReds.csv')
summary(df)
ggplot(aes(x = quality), data = df) +
geom_histogram(binwidth = 1,fill="#FF9999", colour="black") +
scale_x_continuous(breaks = 0:10)
summary(df$quality)
ggplot(aes(x = fixed.acidity), data = df) +
geom_histogram(bins=50)
summary(df$fixed.acidity)
ggplot(aes(x = volatile.acidity), data = df) +
geom_histogram(bins=60)
summary(df$volatile.acidity)
ggplot(aes(x = citric.acid), data = df) +
geom_histogram(bins=100)
summary(df$citric.acid)
ggplot(aes(x = residual.sugar), data = df) +
geom_histogram(bins=100)
ggplot(aes(x = residual.sugar), data = df[df$residual.sugar < quantile(df$residual.sugar, 0.95), ]) +
geom_histogram(bins=30)
summary(df$residual.sugar)
ggplot(aes(x = chlorides), data = df) +
geom_histogram()
ggplot(aes(x = chlorides), data = df[df$chlorides < quantile(df$chlorides, 0.96), ]) +
geom_histogram(bins=50)
summary(df$chloridesorides)
ggplot(aes(x = free.sulfur.dioxide), data = df) +
geom_histogram(bins=60)
ggplot(aes(x = free.sulfur.dioxide), data = df[df$free.sulfur.dioxide < quantile(df$free.sulfur.dioxide, 0.99), ]) +
geom_histogram(bins=40)
summary(df$free.sulfur.dioxide)
ggplot(aes(x = total.sulfur.dioxide), data = df) +
geom_histogram(bins=100)
ggplot(aes(x = total.sulfur.dioxide), data = df[df$total.sulfur.dioxide < quantile(df$total.sulfur.dioxide, 0.99), ]) +
geom_histogram(bins=70)
summary(df$total.sulfur.dioxide)
ggplot(aes(x = density), data = df) +
geom_histogram(bins=100)
summary(df$density)
ggplot(aes(x = pH), data = df) +
geom_histogram(bins=90)
summary(df$pH)
ggplot(aes(x = sulphates), data = df) +
geom_histogram(bins=100)
ggplot(aes(x = sulphates), data = df[df$sulphates < quantile(df$sulphates, 0.99), ]) +
geom_histogram(bins=90)
summary(df$sulphates)
ggplot(aes(x = alcohol), data = df) +
geom_histogram(bins=50)
summary(df$alcohol)
library(corrplot)
wine_df <- subset(df, select = - X)
corr_mat=cor(wine_df,method="s")
corrplot(corr_mat)
library(corrplot)
wine_df <- subset(df, select = - X)
corr_mat=cor(wine_df,method="s")
corrplot(corr_mat, type="lower")
library(corrplot)
wine_df <- subset(df, select = - X)
corr_mat=cor(wine_df,method="s")
corrplot(corr_mat)
